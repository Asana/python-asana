AuditLogAPIApi:
  get_audit_log_events: |-
    import asana
    from asana.rest import ApiException
    from pprint import pprint

    configuration = asana.Configuration()
    configuration.access_token = '<YOUR_ACCESS_TOKEN>'
    api_client = asana.ApiClient(configuration)
    
    # create an instance of the API class
    audit_log_api_api_instance = asana.AuditLogAPIApi(api_client)
    workspace_gid = "12345" # str | Globally unique identifier for the workspace or organization.
    opts = {
        'start_at': '2013-10-20T19:20:30+01:00', # datetime | Filter to events created after this time (inclusive).
        'end_at': '2013-10-20T19:20:30+01:00', # datetime | Filter to events created before this time (exclusive).
        'event_type': "event_type_example", # str | Filter to events of this type. Refer to the [supported audit log events](/docs/audit-log-events#supported-audit-log-events) for a full list of values.
        'actor_type': "actor_type_example", # str | Filter to events with an actor of this type. This only needs to be included if querying for actor types without an ID. If `actor_gid` is included, this should be excluded.
        'actor_gid': "actor_gid_example", # str | Filter to events triggered by the actor with this ID.
        'resource_gid': "resource_gid_example", # str | Filter to events with this resource ID.
        'limit': 50, # int | Results per page. The number of objects to return per page. The value must be between 1 and 100.
        'offset': "eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9", # str | Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
    }
    
    try:
        # Get audit log events
        api_response = audit_log_api_api_instance.get_audit_log_events(workspace_gid, opts)
        for data in api_response:
            pprint(data)
    except ApiException as e:
        print("Exception when calling AuditLogAPIApi->get_audit_log_events: %s\n" % e)
