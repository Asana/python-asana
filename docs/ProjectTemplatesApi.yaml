ProjectTemplatesApi:
  delete_project_template: |-
    import asana
    from asana.rest import ApiException
    from pprint import pprint

    configuration = asana.Configuration()
    configuration.access_token = '<YOUR_ACCESS_TOKEN>'
    api_client = asana.ApiClient(configuration)
    
    # create an instance of the API class
    project_templates_api_instance = asana.ProjectTemplatesApi(api_client)
    project_template_gid = "1331" # str | Globally unique identifier for the project template.

    
    try:
        # Delete a project template
        api_response = project_templates_api_instance.delete_project_template(project_template_gid)
        pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectTemplatesApi->delete_project_template: %s\n" % e)
  get_project_template: |-
    import asana
    from asana.rest import ApiException
    from pprint import pprint

    configuration = asana.Configuration()
    configuration.access_token = '<YOUR_ACCESS_TOKEN>'
    api_client = asana.ApiClient(configuration)
    
    # create an instance of the API class
    project_templates_api_instance = asana.ProjectTemplatesApi(api_client)
    project_template_gid = "1331" # str | Globally unique identifier for the project template.
    opts = {
        'opt_fields': "color,description,html_description,name,owner,public,requested_dates,requested_dates.description,requested_dates.name,requested_roles,requested_roles.name,team,team.name", # list[str] | This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    }
    
    try:
        # Get a project template
        api_response = project_templates_api_instance.get_project_template(project_template_gid, opts)
        pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectTemplatesApi->get_project_template: %s\n" % e)
  get_project_templates: |-
    import asana
    from asana.rest import ApiException
    from pprint import pprint

    configuration = asana.Configuration()
    configuration.access_token = '<YOUR_ACCESS_TOKEN>'
    api_client = asana.ApiClient(configuration)
    
    # create an instance of the API class
    project_templates_api_instance = asana.ProjectTemplatesApi(api_client)
    opts = {
        'workspace': "12345", # str | The workspace to filter results on.
        'team': "14916", # str | The team to filter projects on.
        'limit': 50, # int | Results per page. The number of objects to return per page. The value must be between 1 and 100.
        'offset': "eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9", # str | Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
        'opt_fields': "color,description,html_description,name,offset,owner,path,public,requested_dates,requested_dates.description,requested_dates.name,requested_roles,requested_roles.name,team,team.name,uri", # list[str] | This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    }
    
    try:
        # Get multiple project templates
        api_response = project_templates_api_instance.get_project_templates(opts)
        for data in api_response:
            pprint(data)
    except ApiException as e:
        print("Exception when calling ProjectTemplatesApi->get_project_templates: %s\n" % e)
  get_project_templates_for_team: |-
    import asana
    from asana.rest import ApiException
    from pprint import pprint

    configuration = asana.Configuration()
    configuration.access_token = '<YOUR_ACCESS_TOKEN>'
    api_client = asana.ApiClient(configuration)
    
    # create an instance of the API class
    project_templates_api_instance = asana.ProjectTemplatesApi(api_client)
    team_gid = "159874" # str | Globally unique identifier for the team.
    opts = {
        'limit': 50, # int | Results per page. The number of objects to return per page. The value must be between 1 and 100.
        'offset': "eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9", # str | Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
        'opt_fields': "color,description,html_description,name,offset,owner,path,public,requested_dates,requested_dates.description,requested_dates.name,requested_roles,requested_roles.name,team,team.name,uri", # list[str] | This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    }
    
    try:
        # Get a team's project templates
        api_response = project_templates_api_instance.get_project_templates_for_team(team_gid, opts)
        for data in api_response:
            pprint(data)
    except ApiException as e:
        print("Exception when calling ProjectTemplatesApi->get_project_templates_for_team: %s\n" % e)
  instantiate_project: |-
    import asana
    from asana.rest import ApiException
    from pprint import pprint

    configuration = asana.Configuration()
    configuration.access_token = '<YOUR_ACCESS_TOKEN>'
    api_client = asana.ApiClient(configuration)
    
    # create an instance of the API class
    project_templates_api_instance = asana.ProjectTemplatesApi(api_client)
    project_template_gid = "1331" # str | Globally unique identifier for the project template.
    opts = {
        'body': {"data": {"<PARAM_1>": "<VALUE_1>", "<PARAM_2>": "<VALUE_2>",}}, # dict | Describes the inputs used for instantiating a project, such as the resulting project's name, which team it should be created in, and values for date variables.
        'opt_fields': "new_project,new_project.name,new_project_template,new_project_template.name,new_task,new_task.created_by,new_task.name,new_task.resource_subtype,resource_subtype,status", # list[str] | This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    }
    
    try:
        # Instantiate a project from a project template
        api_response = project_templates_api_instance.instantiate_project(project_template_gid, opts)
        pprint(api_response)
    except ApiException as e:
        print("Exception when calling ProjectTemplatesApi->instantiate_project: %s\n" % e)
