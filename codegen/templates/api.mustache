# coding: utf-8

{{>partial_header}}

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six
from {{packageName}}.api_client import ApiClient
from {{packageName}}.pagination.event_iterator import EventIterator
from {{packageName}}.pagination.page_iterator import PageIterator

{{#operations}}
class {{classname}}(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
{{#operation}}
{{#contents}}

    def {{operationId}}(self, {{vendorExtensions.x-codegen-arg-list}}, **kwargs):  # noqa: E501
        """{{#summary}}{{{.}}}{{/summary}}{{^summary}}{{operationId}}{{/summary}}  # noqa: E501

{{#notes}}
        {{{notes}}}  # noqa: E501
{{/notes}}
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
{{#sortParamsByRequiredFlag}}
        >>> thread = api.{{operationId}}({{#parameters}}{{#required}}{{paramName}}, {{/required}}{{/parameters}}async_req=True)
{{/sortParamsByRequiredFlag}}
{{^sortParamsByRequiredFlag}}
        >>> thread = api.{{operationId}}({{#parameters}}{{#required}}{{paramName}}={{paramName}}_value, {{/required}}{{/parameters}}async_req=True)
{{/sortParamsByRequiredFlag}}
        >>> result = thread.get()

        :param async_req bool
{{#parameters}}
        :param {{dataType}} {{paramName}}:{{#description}} {{{description}}}{{/description}}{{#required}} (required){{/required}}{{#optional}}(optional){{/optional}}
{{/parameters}}
        :return: {{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}None{{/returnType}}
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = kwargs.get("_return_http_data_only", True)
        if kwargs.get('async_req'):
            return self.{{operationId}}_with_http_info({{vendorExtensions.x-codegen-arg-list}}, **kwargs)  # noqa: E501
        else:
            (data) = self.{{operationId}}_with_http_info({{vendorExtensions.x-codegen-arg-list}}, **kwargs)  # noqa: E501
            return data

    def {{operationId}}_with_http_info(self, {{vendorExtensions.x-codegen-arg-list}}, **kwargs):  # noqa: E501
        """{{#summary}}{{{.}}}{{/summary}}{{^summary}}{{operationId}}{{/summary}}  # noqa: E501

{{#notes}}
        {{{notes}}}  # noqa: E501
{{/notes}}
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
{{#sortParamsByRequiredFlag}}
        >>> thread = api.{{operationId}}_with_http_info({{#parameters}}{{#required}}{{paramName}}, {{/required}}{{/parameters}}async_req=True)
{{/sortParamsByRequiredFlag}}
{{^sortParamsByRequiredFlag}}
        >>> thread = api.{{operationId}}_with_http_info({{#parameters}}{{#required}}{{paramName}}={{paramName}}_value, {{/required}}{{/parameters}}async_req=True)
{{/sortParamsByRequiredFlag}}
        >>> result = thread.get()

        :param async_req bool
{{#parameters}}
        :param {{dataType}} {{paramName}}:{{#description}} {{{description}}}{{/description}}{{#required}} (required){{/required}}{{#optional}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/optional}}
{{/parameters}}
        :return: {{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}None{{/returnType}}
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = []
        all_params.append('async_req')
        all_params.append('header_params')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('full_payload')
        all_params.append('item_limit')

        params = locals()
        {{#vendorExtensions.x-codegen-isSearchTasksForWorkspace}}
        matchSnakeCase = '^custom_fields_(.*?)_.*$'
        custom_fields_query_param_keys = []
        {{/vendorExtensions.x-codegen-isSearchTasksForWorkspace}}
        for key, val in six.iteritems(params['kwargs']):
            {{#vendorExtensions.x-codegen-isSearchTasksForWorkspace}}
            # Do not throw an error if the user provides custom field query parameters
            if (re.match(matchSnakeCase, key)):
                custom_field_gid = re.search(matchSnakeCase, key).group(1)
                custom_field_query_param_key = key.replace(f'custom_fields_{custom_field_gid}_', f'custom_fields.{custom_field_gid}.')
                params[custom_field_query_param_key] = val
                custom_fields_query_param_keys.append(custom_field_query_param_key)
                continue
            {{/vendorExtensions.x-codegen-isSearchTasksForWorkspace}}
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method {{operationId}}" % key
                )
            params[key] = val
        del params['kwargs']
{{#parameters}}
{{#required}}
        # verify the required parameter '{{paramName}}' is set
        if ({{paramName}} is None):
            raise ValueError("Missing the required parameter `{{paramName}}` when calling `{{operationId}}`")  # noqa: E501
{{/required}}
{{/parameters}}

{{#parameters}}
{{#hasValidation}}
    {{#maxLength}}
        if ('{{paramName}}' in params and
                len(params['{{paramName}}']) > {{maxLength}}):
            raise ValueError("Invalid value for parameter `{{paramName}}` when calling `{{operationId}}`, length must be less than or equal to `{{maxLength}}`")  # noqa: E501
    {{/maxLength}}
    {{#minLength}}
        if ('{{paramName}}' in params and
                len(params['{{paramName}}']) < {{minLength}}):
            raise ValueError("Invalid value for parameter `{{paramName}}` when calling `{{operationId}}`, length must be greater than or equal to `{{minLength}}`")  # noqa: E501
    {{/minLength}}
    {{#maximum}}
        if '{{paramName}}' in params and params['{{paramName}}'] >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}}:  # noqa: E501
            raise ValueError("Invalid value for parameter `{{paramName}}` when calling `{{operationId}}`, must be a value less than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}`{{maximum}}`")  # noqa: E501
    {{/maximum}}
    {{#minimum}}
        if '{{paramName}}' in params and params['{{paramName}}'] <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}}:  # noqa: E501
            raise ValueError("Invalid value for parameter `{{paramName}}` when calling `{{operationId}}`, must be a value greater than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}`{{minimum}}`")  # noqa: E501
    {{/minimum}}
    {{#pattern}}
        if '{{paramName}}' in params and not re.search(r'{{{vendorExtensions.x-regex}}}', params['{{paramName}}']{{#vendorExtensions.x-modifiers}}{{#@first}}, flags={{/@first}}re.{{.}}{{^@last}} | {{/@last}}{{/vendorExtensions.x-modifiers}}):  # noqa: E501
            raise ValueError("Invalid value for parameter `{{paramName}}` when calling `{{operationId}}`, must conform to the pattern `{{{pattern}}}`")  # noqa: E501
    {{/pattern}}
    {{#maxItems}}
        if ('{{paramName}}' in params and
                len(params['{{paramName}}']) > {{maxItems}}):
            raise ValueError("Invalid value for parameter `{{paramName}}` when calling `{{operationId}}`, number of items must be less than or equal to `{{maxItems}}`")  # noqa: E501
    {{/maxItems}}
    {{#minItems}}
        if ('{{paramName}}' in params and
                len(params['{{paramName}}']) < {{minItems}}):
            raise ValueError("Invalid value for parameter `{{paramName}}` when calling `{{operationId}}`, number of items must be greater than or equal to `{{minItems}}`")  # noqa: E501
    {{/minItems}}
{{/hasValidation}}
{{#@last}}
{{/@last}}
{{/parameters}}
        collection_formats = {}

        path_params = {}
{{#pathParams}}
        path_params['{{baseName}}'] = {{paramName}}{{#isListContainer}}  # noqa: E501
        collection_formats['{{baseName}}'] = '{{collectionFormat}}'{{/isListContainer}}  # noqa: E501
{{/pathParams}}

        query_params = {}
        {{#hasOptionalParams}}
        query_params = opts
        {{/hasOptionalParams}}
        {{#queryParams}}{{#required}}
        query_params['{{baseName}}'] = {{paramName}}
        {{/required}}{{/queryParams}}

{{#vendorExtensions.x-codegen-isSearchTasksForWorkspace}}
        # Checks if the user provided custom field query parameters and adds it to the request
        for key in custom_fields_query_param_keys:
            query_params[key] = params[key]  # noqa: E501
{{/vendorExtensions.x-codegen-isSearchTasksForWorkspace}}

        header_params = kwargs.get("header_params", {})
{{#headerParams}}
        if '{{paramName}}' in params:
            header_params['{{baseName}}'] = params['{{paramName}}']{{#isListContainer}}  # noqa: E501
            collection_formats['{{baseName}}'] = '{{collectionFormat}}'{{/isListContainer}}  # noqa: E501
{{/headerParams}}

        form_params = []
        local_var_files = {}
{{#formParams}}
        if '{{paramName}}' in opts:
            {{^isBinary}}form_params.append(('{{baseName}}', opts['{{paramName}}'])){{/isBinary}}{{#isBinary}}local_var_files['{{baseName}}'] = opts['{{paramName}}']{{/isBinary}}{{#isListContainer}}  # noqa: E501
            collection_formats['{{baseName}}'] = '{{collectionFormat}}'{{/isListContainer}}  # noqa: E501

            # Because form params and query params are both provided in the opts method parameter we need to remove the form params from the query params
            query_params.pop('{{baseName}}')
{{/formParams}}

        body_params = {{#bodyParam}}{{#required}}{{paramName}}{{/required}}{{^required}}opts['{{paramName}}']{{/required}}{{/bodyParam}}{{^bodyParam}}None{{/bodyParam}}

        {{#hasProduces}}
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            [{{#produces}}'{{{mediaType}}}'{{#hasMore}}, {{/hasMore}}{{/produces}}])  # noqa: E501

        {{/hasProduces}}
        {{#hasConsumes}}
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            [{{#consumes}}'{{{mediaType}}}'{{#hasMore}}, {{/hasMore}}{{/consumes}}])  # noqa: E501

        {{/hasConsumes}}
        # Authentication setting
        auth_settings = [{{#authMethods}}'{{name}}'{{#hasMore}}, {{/hasMore}}{{/authMethods}}]  # noqa: E501

        # hard checking for True boolean value because user can provide full_payload or async_req with any data type
        if kwargs.get("full_payload", False) is True or kwargs.get('async_req', False) is True:
            return self.api_client.call_api(
                '{{{path}}}', '{{httpMethod}}',
                path_params,
                query_params,
                header_params,
                body=body_params,
                post_params=form_params,
                files=local_var_files,
                response_type=object,  # noqa: E501
                auth_settings=auth_settings,
                async_req=params.get('async_req'),
                _return_http_data_only=params.get('_return_http_data_only'),
                _preload_content=params.get('_preload_content', True),
                _request_timeout=params.get('_request_timeout'),
                collection_formats=collection_formats
            )
        elif self.api_client.configuration.return_page_iterator:
            {{#vendorExtensions.x-codegen-isArrayResponse}}
            query_params["limit"] = query_params.get("limit", self.api_client.configuration.page_limit)
            {{#vendorExtensions.x-codegen-isGetEvents}}
            return EventIterator(
            {{/vendorExtensions.x-codegen-isGetEvents}}
            {{^vendorExtensions.x-codegen-isGetEvents}}
            return PageIterator(
            {{/vendorExtensions.x-codegen-isGetEvents}}
                self.api_client,
                {
                    "resource_path": '{{&path}}',
                    "method": '{{httpMethod}}',
                    "path_params": path_params,
                    "query_params": query_params,
                    "header_params": header_params,
                    "body": body_params,
                    "post_params": form_params,
                    "files": local_var_files,
                    "response_type": object,
                    "auth_settings": auth_settings,
                    "async_req": params.get('async_req'),
                    "_return_http_data_only": params.get('_return_http_data_only'),
                    "_preload_content": params.get('_preload_content', True),
                    "_request_timeout": params.get('_request_timeout'),
                    "collection_formats": collection_formats
                },
                **kwargs
            ).items()
            {{/vendorExtensions.x-codegen-isArrayResponse}}
            {{^vendorExtensions.x-codegen-isArrayResponse}}
            (data) = self.api_client.call_api(
                '{{{path}}}', '{{httpMethod}}',
                path_params,
                query_params,
                header_params,
                body=body_params,
                post_params=form_params,
                files=local_var_files,
                response_type=object,  # noqa: E501
                auth_settings=auth_settings,
                async_req=params.get('async_req'),
                _return_http_data_only=params.get('_return_http_data_only'),
                _preload_content=params.get('_preload_content', True),
                _request_timeout=params.get('_request_timeout'),
                collection_formats=collection_formats
            )
            if params.get('_return_http_data_only') == False:
                return data
            return data["data"] if data else data
            {{/vendorExtensions.x-codegen-isArrayResponse}}
        else:
            return self.api_client.call_api(
            '{{{path}}}', '{{httpMethod}}',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=object,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
{{/contents}}
{{/operation}}
{{/operations}}
