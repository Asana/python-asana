# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GoalMembershipResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gid': 'str',
        'resource_type': 'str',
        'member': 'ProjectMembershipResponseMember',
        'goal': 'GoalMembershipBaseGoal',
        'is_commenter': 'bool',
        'is_editor': 'bool'
    }

    attribute_map = {
        'gid': 'gid',
        'resource_type': 'resource_type',
        'member': 'member',
        'goal': 'goal',
        'is_commenter': 'is_commenter',
        'is_editor': 'is_editor'
    }

    def __init__(self, gid=None, resource_type=None, member=None, goal=None, is_commenter=None, is_editor=None):  # noqa: E501
        """GoalMembershipResponse - a model defined in Swagger"""  # noqa: E501
        self._gid = None
        self._resource_type = None
        self._member = None
        self._goal = None
        self._is_commenter = None
        self._is_editor = None
        self.discriminator = None
        if gid is not None:
            self.gid = gid
        if resource_type is not None:
            self.resource_type = resource_type
        if member is not None:
            self.member = member
        if goal is not None:
            self.goal = goal
        if is_commenter is not None:
            self.is_commenter = is_commenter
        if is_editor is not None:
            self.is_editor = is_editor

    @property
    def gid(self):
        """Gets the gid of this GoalMembershipResponse.  # noqa: E501

        Globally unique identifier of the resource, as a string.  # noqa: E501

        :return: The gid of this GoalMembershipResponse.  # noqa: E501
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this GoalMembershipResponse.

        Globally unique identifier of the resource, as a string.  # noqa: E501

        :param gid: The gid of this GoalMembershipResponse.  # noqa: E501
        :type: str
        """

        self._gid = gid

    @property
    def resource_type(self):
        """Gets the resource_type of this GoalMembershipResponse.  # noqa: E501

        The base type of this resource.  # noqa: E501

        :return: The resource_type of this GoalMembershipResponse.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this GoalMembershipResponse.

        The base type of this resource.  # noqa: E501

        :param resource_type: The resource_type of this GoalMembershipResponse.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def member(self):
        """Gets the member of this GoalMembershipResponse.  # noqa: E501


        :return: The member of this GoalMembershipResponse.  # noqa: E501
        :rtype: ProjectMembershipResponseMember
        """
        return self._member

    @member.setter
    def member(self, member):
        """Sets the member of this GoalMembershipResponse.


        :param member: The member of this GoalMembershipResponse.  # noqa: E501
        :type: ProjectMembershipResponseMember
        """

        self._member = member

    @property
    def goal(self):
        """Gets the goal of this GoalMembershipResponse.  # noqa: E501


        :return: The goal of this GoalMembershipResponse.  # noqa: E501
        :rtype: GoalMembershipBaseGoal
        """
        return self._goal

    @goal.setter
    def goal(self, goal):
        """Sets the goal of this GoalMembershipResponse.


        :param goal: The goal of this GoalMembershipResponse.  # noqa: E501
        :type: GoalMembershipBaseGoal
        """

        self._goal = goal

    @property
    def is_commenter(self):
        """Gets the is_commenter of this GoalMembershipResponse.  # noqa: E501

        Describes if the member is comment only in goal.  # noqa: E501

        :return: The is_commenter of this GoalMembershipResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_commenter

    @is_commenter.setter
    def is_commenter(self, is_commenter):
        """Sets the is_commenter of this GoalMembershipResponse.

        Describes if the member is comment only in goal.  # noqa: E501

        :param is_commenter: The is_commenter of this GoalMembershipResponse.  # noqa: E501
        :type: bool
        """

        self._is_commenter = is_commenter

    @property
    def is_editor(self):
        """Gets the is_editor of this GoalMembershipResponse.  # noqa: E501

        Describes if the member is editor in goal.  # noqa: E501

        :return: The is_editor of this GoalMembershipResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_editor

    @is_editor.setter
    def is_editor(self, is_editor):
        """Sets the is_editor of this GoalMembershipResponse.

        Describes if the member is editor in goal.  # noqa: E501

        :param is_editor: The is_editor of this GoalMembershipResponse.  # noqa: E501
        :type: bool
        """

        self._is_editor = is_editor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GoalMembershipResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GoalMembershipResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
