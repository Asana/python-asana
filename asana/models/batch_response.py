# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BatchResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status_code': 'int',
        'headers': 'object',
        'body': 'object'
    }

    attribute_map = {
        'status_code': 'status_code',
        'headers': 'headers',
        'body': 'body'
    }

    def __init__(self, status_code=None, headers=None, body=None):  # noqa: E501
        """BatchResponse - a model defined in Swagger"""  # noqa: E501
        self._status_code = None
        self._headers = None
        self._body = None
        self.discriminator = None
        if status_code is not None:
            self.status_code = status_code
        if headers is not None:
            self.headers = headers
        if body is not None:
            self.body = body

    @property
    def status_code(self):
        """Gets the status_code of this BatchResponse.  # noqa: E501

        The HTTP status code that the invoked endpoint returned.  # noqa: E501

        :return: The status_code of this BatchResponse.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this BatchResponse.

        The HTTP status code that the invoked endpoint returned.  # noqa: E501

        :param status_code: The status_code of this BatchResponse.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def headers(self):
        """Gets the headers of this BatchResponse.  # noqa: E501

        A map of HTTP headers specific to this result. This is primarily used for returning a `Location` header to accompany a `201 Created` result.  The parent HTTP response will contain all common headers.  # noqa: E501

        :return: The headers of this BatchResponse.  # noqa: E501
        :rtype: object
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this BatchResponse.

        A map of HTTP headers specific to this result. This is primarily used for returning a `Location` header to accompany a `201 Created` result.  The parent HTTP response will contain all common headers.  # noqa: E501

        :param headers: The headers of this BatchResponse.  # noqa: E501
        :type: object
        """

        self._headers = headers

    @property
    def body(self):
        """Gets the body of this BatchResponse.  # noqa: E501

        The JSON body that the invoked endpoint returned.  # noqa: E501

        :return: The body of this BatchResponse.  # noqa: E501
        :rtype: object
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this BatchResponse.

        The JSON body that the invoked endpoint returned.  # noqa: E501

        :param body: The body of this BatchResponse.  # noqa: E501
        :type: object
        """

        self._body = body

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BatchResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
