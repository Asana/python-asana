# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GoalRelationshipCompact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gid': 'str',
        'resource_type': 'str',
        'resource_subtype': 'str',
        'supporting_resource': 'GoalRelationshipBaseSupportingResource',
        'contribution_weight': 'float'
    }

    attribute_map = {
        'gid': 'gid',
        'resource_type': 'resource_type',
        'resource_subtype': 'resource_subtype',
        'supporting_resource': 'supporting_resource',
        'contribution_weight': 'contribution_weight'
    }

    def __init__(self, gid=None, resource_type=None, resource_subtype=None, supporting_resource=None, contribution_weight=None):  # noqa: E501
        """GoalRelationshipCompact - a model defined in Swagger"""  # noqa: E501
        self._gid = None
        self._resource_type = None
        self._resource_subtype = None
        self._supporting_resource = None
        self._contribution_weight = None
        self.discriminator = None
        if gid is not None:
            self.gid = gid
        if resource_type is not None:
            self.resource_type = resource_type
        if resource_subtype is not None:
            self.resource_subtype = resource_subtype
        if supporting_resource is not None:
            self.supporting_resource = supporting_resource
        if contribution_weight is not None:
            self.contribution_weight = contribution_weight

    @property
    def gid(self):
        """Gets the gid of this GoalRelationshipCompact.  # noqa: E501

        Globally unique identifier of the resource, as a string.  # noqa: E501

        :return: The gid of this GoalRelationshipCompact.  # noqa: E501
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this GoalRelationshipCompact.

        Globally unique identifier of the resource, as a string.  # noqa: E501

        :param gid: The gid of this GoalRelationshipCompact.  # noqa: E501
        :type: str
        """

        self._gid = gid

    @property
    def resource_type(self):
        """Gets the resource_type of this GoalRelationshipCompact.  # noqa: E501

        The base type of this resource.  # noqa: E501

        :return: The resource_type of this GoalRelationshipCompact.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this GoalRelationshipCompact.

        The base type of this resource.  # noqa: E501

        :param resource_type: The resource_type of this GoalRelationshipCompact.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def resource_subtype(self):
        """Gets the resource_subtype of this GoalRelationshipCompact.  # noqa: E501

        The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.  # noqa: E501

        :return: The resource_subtype of this GoalRelationshipCompact.  # noqa: E501
        :rtype: str
        """
        return self._resource_subtype

    @resource_subtype.setter
    def resource_subtype(self, resource_subtype):
        """Sets the resource_subtype of this GoalRelationshipCompact.

        The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.  # noqa: E501

        :param resource_subtype: The resource_subtype of this GoalRelationshipCompact.  # noqa: E501
        :type: str
        """
        allowed_values = ["subgoal", "supporting_work"]  # noqa: E501
        if resource_subtype not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_subtype` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_subtype, allowed_values)
            )

        self._resource_subtype = resource_subtype

    @property
    def supporting_resource(self):
        """Gets the supporting_resource of this GoalRelationshipCompact.  # noqa: E501


        :return: The supporting_resource of this GoalRelationshipCompact.  # noqa: E501
        :rtype: GoalRelationshipBaseSupportingResource
        """
        return self._supporting_resource

    @supporting_resource.setter
    def supporting_resource(self, supporting_resource):
        """Sets the supporting_resource of this GoalRelationshipCompact.


        :param supporting_resource: The supporting_resource of this GoalRelationshipCompact.  # noqa: E501
        :type: GoalRelationshipBaseSupportingResource
        """

        self._supporting_resource = supporting_resource

    @property
    def contribution_weight(self):
        """Gets the contribution_weight of this GoalRelationshipCompact.  # noqa: E501

        The weight that the supporting resource's progress contributes to the supported goal's progress. This can only be 0 or 1.  # noqa: E501

        :return: The contribution_weight of this GoalRelationshipCompact.  # noqa: E501
        :rtype: float
        """
        return self._contribution_weight

    @contribution_weight.setter
    def contribution_weight(self, contribution_weight):
        """Sets the contribution_weight of this GoalRelationshipCompact.

        The weight that the supporting resource's progress contributes to the supported goal's progress. This can only be 0 or 1.  # noqa: E501

        :param contribution_weight: The contribution_weight of this GoalRelationshipCompact.  # noqa: E501
        :type: float
        """

        self._contribution_weight = contribution_weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GoalRelationshipCompact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GoalRelationshipCompact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
