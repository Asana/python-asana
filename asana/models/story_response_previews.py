# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StoryResponsePreviews(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fallback': 'str',
        'footer': 'str',
        'header': 'str',
        'header_link': 'str',
        'html_text': 'str',
        'text': 'str',
        'title': 'str',
        'title_link': 'str'
    }

    attribute_map = {
        'fallback': 'fallback',
        'footer': 'footer',
        'header': 'header',
        'header_link': 'header_link',
        'html_text': 'html_text',
        'text': 'text',
        'title': 'title',
        'title_link': 'title_link'
    }

    def __init__(self, fallback=None, footer=None, header=None, header_link=None, html_text=None, text=None, title=None, title_link=None):  # noqa: E501
        """StoryResponsePreviews - a model defined in Swagger"""  # noqa: E501
        self._fallback = None
        self._footer = None
        self._header = None
        self._header_link = None
        self._html_text = None
        self._text = None
        self._title = None
        self._title_link = None
        self.discriminator = None
        if fallback is not None:
            self.fallback = fallback
        if footer is not None:
            self.footer = footer
        if header is not None:
            self.header = header
        if header_link is not None:
            self.header_link = header_link
        if html_text is not None:
            self.html_text = html_text
        if text is not None:
            self.text = text
        if title is not None:
            self.title = title
        if title_link is not None:
            self.title_link = title_link

    @property
    def fallback(self):
        """Gets the fallback of this StoryResponsePreviews.  # noqa: E501

        Some fallback text to display if unable to display the full preview.  # noqa: E501

        :return: The fallback of this StoryResponsePreviews.  # noqa: E501
        :rtype: str
        """
        return self._fallback

    @fallback.setter
    def fallback(self, fallback):
        """Sets the fallback of this StoryResponsePreviews.

        Some fallback text to display if unable to display the full preview.  # noqa: E501

        :param fallback: The fallback of this StoryResponsePreviews.  # noqa: E501
        :type: str
        """

        self._fallback = fallback

    @property
    def footer(self):
        """Gets the footer of this StoryResponsePreviews.  # noqa: E501

        Text to display in the footer.  # noqa: E501

        :return: The footer of this StoryResponsePreviews.  # noqa: E501
        :rtype: str
        """
        return self._footer

    @footer.setter
    def footer(self, footer):
        """Sets the footer of this StoryResponsePreviews.

        Text to display in the footer.  # noqa: E501

        :param footer: The footer of this StoryResponsePreviews.  # noqa: E501
        :type: str
        """

        self._footer = footer

    @property
    def header(self):
        """Gets the header of this StoryResponsePreviews.  # noqa: E501

        Text to display in the header.  # noqa: E501

        :return: The header of this StoryResponsePreviews.  # noqa: E501
        :rtype: str
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this StoryResponsePreviews.

        Text to display in the header.  # noqa: E501

        :param header: The header of this StoryResponsePreviews.  # noqa: E501
        :type: str
        """

        self._header = header

    @property
    def header_link(self):
        """Gets the header_link of this StoryResponsePreviews.  # noqa: E501

        Where the header will link to.  # noqa: E501

        :return: The header_link of this StoryResponsePreviews.  # noqa: E501
        :rtype: str
        """
        return self._header_link

    @header_link.setter
    def header_link(self, header_link):
        """Sets the header_link of this StoryResponsePreviews.

        Where the header will link to.  # noqa: E501

        :param header_link: The header_link of this StoryResponsePreviews.  # noqa: E501
        :type: str
        """

        self._header_link = header_link

    @property
    def html_text(self):
        """Gets the html_text of this StoryResponsePreviews.  # noqa: E501

        HTML formatted text for the body of the preview.  # noqa: E501

        :return: The html_text of this StoryResponsePreviews.  # noqa: E501
        :rtype: str
        """
        return self._html_text

    @html_text.setter
    def html_text(self, html_text):
        """Sets the html_text of this StoryResponsePreviews.

        HTML formatted text for the body of the preview.  # noqa: E501

        :param html_text: The html_text of this StoryResponsePreviews.  # noqa: E501
        :type: str
        """

        self._html_text = html_text

    @property
    def text(self):
        """Gets the text of this StoryResponsePreviews.  # noqa: E501

        Text for the body of the preview.  # noqa: E501

        :return: The text of this StoryResponsePreviews.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this StoryResponsePreviews.

        Text for the body of the preview.  # noqa: E501

        :param text: The text of this StoryResponsePreviews.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def title(self):
        """Gets the title of this StoryResponsePreviews.  # noqa: E501

        Text to display as the title.  # noqa: E501

        :return: The title of this StoryResponsePreviews.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this StoryResponsePreviews.

        Text to display as the title.  # noqa: E501

        :param title: The title of this StoryResponsePreviews.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def title_link(self):
        """Gets the title_link of this StoryResponsePreviews.  # noqa: E501

        Where to title will link to.  # noqa: E501

        :return: The title_link of this StoryResponsePreviews.  # noqa: E501
        :rtype: str
        """
        return self._title_link

    @title_link.setter
    def title_link(self, title_link):
        """Sets the title_link of this StoryResponsePreviews.

        Where to title will link to.  # noqa: E501

        :param title_link: The title_link of this StoryResponsePreviews.  # noqa: E501
        :type: str
        """

        self._title_link = title_link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StoryResponsePreviews, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoryResponsePreviews):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
