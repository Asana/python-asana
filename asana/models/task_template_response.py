# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaskTemplateResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gid': 'str',
        'resource_type': 'str',
        'name': 'str',
        'project': 'AllOfTaskTemplateResponseProject',
        'template': 'AllOfTaskTemplateResponseTemplate',
        'created_by': 'AllOfTaskTemplateResponseCreatedBy',
        'created_at': 'datetime'
    }

    attribute_map = {
        'gid': 'gid',
        'resource_type': 'resource_type',
        'name': 'name',
        'project': 'project',
        'template': 'template',
        'created_by': 'created_by',
        'created_at': 'created_at'
    }

    def __init__(self, gid=None, resource_type=None, name=None, project=None, template=None, created_by=None, created_at=None):  # noqa: E501
        """TaskTemplateResponse - a model defined in Swagger"""  # noqa: E501
        self._gid = None
        self._resource_type = None
        self._name = None
        self._project = None
        self._template = None
        self._created_by = None
        self._created_at = None
        self.discriminator = None
        if gid is not None:
            self.gid = gid
        if resource_type is not None:
            self.resource_type = resource_type
        if name is not None:
            self.name = name
        if project is not None:
            self.project = project
        if template is not None:
            self.template = template
        if created_by is not None:
            self.created_by = created_by
        if created_at is not None:
            self.created_at = created_at

    @property
    def gid(self):
        """Gets the gid of this TaskTemplateResponse.  # noqa: E501

        Globally unique identifier of the resource, as a string.  # noqa: E501

        :return: The gid of this TaskTemplateResponse.  # noqa: E501
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this TaskTemplateResponse.

        Globally unique identifier of the resource, as a string.  # noqa: E501

        :param gid: The gid of this TaskTemplateResponse.  # noqa: E501
        :type: str
        """

        self._gid = gid

    @property
    def resource_type(self):
        """Gets the resource_type of this TaskTemplateResponse.  # noqa: E501

        The base type of this resource.  # noqa: E501

        :return: The resource_type of this TaskTemplateResponse.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this TaskTemplateResponse.

        The base type of this resource.  # noqa: E501

        :param resource_type: The resource_type of this TaskTemplateResponse.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def name(self):
        """Gets the name of this TaskTemplateResponse.  # noqa: E501

        Name of the task template.  # noqa: E501

        :return: The name of this TaskTemplateResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaskTemplateResponse.

        Name of the task template.  # noqa: E501

        :param name: The name of this TaskTemplateResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def project(self):
        """Gets the project of this TaskTemplateResponse.  # noqa: E501

        The project that this task template belongs to.  # noqa: E501

        :return: The project of this TaskTemplateResponse.  # noqa: E501
        :rtype: AllOfTaskTemplateResponseProject
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this TaskTemplateResponse.

        The project that this task template belongs to.  # noqa: E501

        :param project: The project of this TaskTemplateResponse.  # noqa: E501
        :type: AllOfTaskTemplateResponseProject
        """

        self._project = project

    @property
    def template(self):
        """Gets the template of this TaskTemplateResponse.  # noqa: E501

        The configuration for the task that will be created from this template.  # noqa: E501

        :return: The template of this TaskTemplateResponse.  # noqa: E501
        :rtype: AllOfTaskTemplateResponseTemplate
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this TaskTemplateResponse.

        The configuration for the task that will be created from this template.  # noqa: E501

        :param template: The template of this TaskTemplateResponse.  # noqa: E501
        :type: AllOfTaskTemplateResponseTemplate
        """

        self._template = template

    @property
    def created_by(self):
        """Gets the created_by of this TaskTemplateResponse.  # noqa: E501

        The user who created this task template.  # noqa: E501

        :return: The created_by of this TaskTemplateResponse.  # noqa: E501
        :rtype: AllOfTaskTemplateResponseCreatedBy
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this TaskTemplateResponse.

        The user who created this task template.  # noqa: E501

        :param created_by: The created_by of this TaskTemplateResponse.  # noqa: E501
        :type: AllOfTaskTemplateResponseCreatedBy
        """

        self._created_by = created_by

    @property
    def created_at(self):
        """Gets the created_at of this TaskTemplateResponse.  # noqa: E501

        The time at which this task template was created.  # noqa: E501

        :return: The created_at of this TaskTemplateResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TaskTemplateResponse.

        The time at which this task template was created.  # noqa: E501

        :param created_at: The created_at of this TaskTemplateResponse.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskTemplateResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskTemplateResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
