# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TimeTrackingEntryBase(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gid': 'str',
        'resource_type': 'str',
        'duration_minutes': 'int',
        'entered_on': 'date',
        'created_by': 'StoryResponseAssignee',
        'task': 'StoryResponseTask',
        'created_at': 'datetime'
    }

    attribute_map = {
        'gid': 'gid',
        'resource_type': 'resource_type',
        'duration_minutes': 'duration_minutes',
        'entered_on': 'entered_on',
        'created_by': 'created_by',
        'task': 'task',
        'created_at': 'created_at'
    }

    def __init__(self, gid=None, resource_type=None, duration_minutes=None, entered_on=None, created_by=None, task=None, created_at=None):  # noqa: E501
        """TimeTrackingEntryBase - a model defined in Swagger"""  # noqa: E501
        self._gid = None
        self._resource_type = None
        self._duration_minutes = None
        self._entered_on = None
        self._created_by = None
        self._task = None
        self._created_at = None
        self.discriminator = None
        if gid is not None:
            self.gid = gid
        if resource_type is not None:
            self.resource_type = resource_type
        if duration_minutes is not None:
            self.duration_minutes = duration_minutes
        if entered_on is not None:
            self.entered_on = entered_on
        if created_by is not None:
            self.created_by = created_by
        if task is not None:
            self.task = task
        if created_at is not None:
            self.created_at = created_at

    @property
    def gid(self):
        """Gets the gid of this TimeTrackingEntryBase.  # noqa: E501

        Globally unique identifier of the resource, as a string.  # noqa: E501

        :return: The gid of this TimeTrackingEntryBase.  # noqa: E501
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this TimeTrackingEntryBase.

        Globally unique identifier of the resource, as a string.  # noqa: E501

        :param gid: The gid of this TimeTrackingEntryBase.  # noqa: E501
        :type: str
        """

        self._gid = gid

    @property
    def resource_type(self):
        """Gets the resource_type of this TimeTrackingEntryBase.  # noqa: E501

        The base type of this resource.  # noqa: E501

        :return: The resource_type of this TimeTrackingEntryBase.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this TimeTrackingEntryBase.

        The base type of this resource.  # noqa: E501

        :param resource_type: The resource_type of this TimeTrackingEntryBase.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def duration_minutes(self):
        """Gets the duration_minutes of this TimeTrackingEntryBase.  # noqa: E501

        Time in minutes tracked by the entry.  # noqa: E501

        :return: The duration_minutes of this TimeTrackingEntryBase.  # noqa: E501
        :rtype: int
        """
        return self._duration_minutes

    @duration_minutes.setter
    def duration_minutes(self, duration_minutes):
        """Sets the duration_minutes of this TimeTrackingEntryBase.

        Time in minutes tracked by the entry.  # noqa: E501

        :param duration_minutes: The duration_minutes of this TimeTrackingEntryBase.  # noqa: E501
        :type: int
        """

        self._duration_minutes = duration_minutes

    @property
    def entered_on(self):
        """Gets the entered_on of this TimeTrackingEntryBase.  # noqa: E501

        The day that this entry is logged on.  # noqa: E501

        :return: The entered_on of this TimeTrackingEntryBase.  # noqa: E501
        :rtype: date
        """
        return self._entered_on

    @entered_on.setter
    def entered_on(self, entered_on):
        """Sets the entered_on of this TimeTrackingEntryBase.

        The day that this entry is logged on.  # noqa: E501

        :param entered_on: The entered_on of this TimeTrackingEntryBase.  # noqa: E501
        :type: date
        """

        self._entered_on = entered_on

    @property
    def created_by(self):
        """Gets the created_by of this TimeTrackingEntryBase.  # noqa: E501


        :return: The created_by of this TimeTrackingEntryBase.  # noqa: E501
        :rtype: StoryResponseAssignee
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this TimeTrackingEntryBase.


        :param created_by: The created_by of this TimeTrackingEntryBase.  # noqa: E501
        :type: StoryResponseAssignee
        """

        self._created_by = created_by

    @property
    def task(self):
        """Gets the task of this TimeTrackingEntryBase.  # noqa: E501


        :return: The task of this TimeTrackingEntryBase.  # noqa: E501
        :rtype: StoryResponseTask
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this TimeTrackingEntryBase.


        :param task: The task of this TimeTrackingEntryBase.  # noqa: E501
        :type: StoryResponseTask
        """

        self._task = task

    @property
    def created_at(self):
        """Gets the created_at of this TimeTrackingEntryBase.  # noqa: E501

        The time at which this resource was created.  # noqa: E501

        :return: The created_at of this TimeTrackingEntryBase.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TimeTrackingEntryBase.

        The time at which this resource was created.  # noqa: E501

        :param created_at: The created_at of this TimeTrackingEntryBase.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeTrackingEntryBase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeTrackingEntryBase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
